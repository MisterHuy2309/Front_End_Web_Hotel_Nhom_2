{"file":"AdminChat.vue.mjs","mappings":";;;;;AASA,MAAM,gBAAgB;;;;;AAJtB,UAAM,YAAY,IAAI,CAAA,CAAE;AACxB,UAAM,mBAAmB,IAAI,IAAI;AACjC,UAAM,WAAW,IAAI,CAAA,CAAE;AACvB,UAAM,aAAa,IAAI,EAAE;AAIN,QAAI,qBAAsB,EAC1C,QAAQ,4CAA4C,EACpD,iBAAiB,SAAS,WAAW,EACrC,MAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../pages/AdminChat.vue"],"sourcesContent":["<script setup>\r\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\r\nimport { HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport axios from 'axios';\r\n\r\nconst customers = ref([]);\r\nconst selectedCustomer = ref(null);\r\nconst messages = ref([]);\r\nconst newMessage = ref('');\r\nconst defaultAvatar = 'https://via.placeholder.com/50';\r\n\r\n// SignalR connection instance\r\nconst connection = new HubConnectionBuilder()\r\n  .withUrl('http://nhom2webkhachsan.runasp.net/chathub') // Thay bằng URL SignalR của bạn\r\n  .configureLogging(LogLevel.Information)\r\n  .build();\r\n\r\n// Lấy danh sách khách hàng\r\nconst fetchCustomers = async () => {\r\n  try {\r\n    const response = await axios.get('http://nhom2webkhachsan.runasp.net/api/KhachHang');\r\n    customers.value = response.data;\r\n    console.log('Danh sách khách hàng:', customers.value);\r\n  } catch (error) {\r\n    console.error('Lỗi khi lấy danh sách khách hàng:', error);\r\n  }\r\n};\r\n\r\n// Kết nối SignalR\r\nconst setupSignalR = async () => {\r\n  connection.on('ReceiveMessage', (sender, message) => {\r\n    console.log('Tin nhắn nhận được từ:', sender, 'Nội dung:', message);\r\n    if (selectedCustomer.value && sender === selectedCustomer.value.maKhachHang) {\r\n      messages.value.push({ text: message, isAdmin: false });\r\n    }\r\n  });\r\n\r\n  connection.on('AdminNotAvailable', (message) => {\r\n    console.error(message);\r\n  });\r\n\r\n  connection.on('CustomerNotAvailable', (message) => {\r\n    console.error(message);\r\n  });\r\n\r\n  try {\r\n    await connection.start();\r\n    console.log('SignalR connected.');\r\n  } catch (error) {\r\n    console.error('SignalR connection error:', error);\r\n  }\r\n};\r\n\r\n// Chọn khách hàng\r\nconst selectCustomer = (customer) => {\r\n  console.log('Khách hàng được chọn:', customer);\r\n  selectedCustomer.value = customer;\r\n  messages.value = [];\r\n};\r\n\r\n// Gửi tin nhắn\r\nconst sendMessage = async () => {\r\n  console.log('Tin nhắn gửi đi:', newMessage.value);\r\n  if (!newMessage.value.trim()) return;\r\n\r\n  const message = newMessage.value.trim();\r\n  messages.value.push({ text: message, isAdmin: true });\r\n\r\n  try {\r\n    await connection.invoke('SendMessageToCustomer', selectedCustomer.value.maKhachHang, message);\r\n    newMessage.value = '';\r\n  } catch (error) {\r\n    console.error('Lỗi khi gửi tin nhắn:', error);\r\n  }\r\n};\r\n\r\nonMounted(async () => {\r\n  await fetchCustomers();\r\n  await setupSignalR();\r\n});\r\n\r\nonBeforeUnmount(() => {\r\n  connection.stop();\r\n});\r\n</script>\r\n\r\n<template>\r\n  <div class=\"chat-container\">\r\n    <!-- Sidebar -->\r\n    <div v-if=\"customers.length > 0\" class=\"sidebar\">\r\n      <h2>Danh sách khách hàng</h2>\r\n      <ul>\r\n        <li\r\n          v-for=\"customer in customers\"\r\n          :key=\"customer.maKhachHang\"\r\n          @click=\"selectCustomer(customer)\"\r\n          :class=\"{ active: selectedCustomer?.maKhachHang === customer.maKhachHang }\"\r\n        >\r\n          <img :src=\"customer.hinhAnh || defaultAvatar\" alt=\"Avatar\" class=\"avatar\" />\r\n          <span>{{ customer.hoTen }}</span>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n    <div v-else class=\"no-customer\">\r\n      <p>Không có khách hàng nào để hiển thị.</p>\r\n    </div>\r\n\r\n    <!-- Chat Box -->\r\n    <div v-if=\"selectedCustomer\" class=\"chat-box\">\r\n      <h2>Chat với {{ selectedCustomer.hoTen }}</h2>\r\n      <div class=\"messages\">\r\n        <div\r\n          v-for=\"(message, index) in messages\"\r\n          :key=\"index\"\r\n          :class=\"message.isAdmin ? 'admin-message' : 'customer-message'\"\r\n        >\r\n          {{ message.text }}\r\n        </div>\r\n      </div>\r\n      <div class=\"chat-input\">\r\n        <input\r\n          type=\"text\"\r\n          v-model=\"newMessage\"\r\n          placeholder=\"Nhập tin nhắn...\"\r\n          @keyup.enter=\"sendMessage\"\r\n        />\r\n        <button @click=\"sendMessage\">Gửi</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style scoped>\r\n.chat-container {\r\n  display: flex;\r\n  height: 100vh;\r\n  max-width: 1200px;\r\n  margin: auto;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.sidebar {\r\n  width: 300px;\r\n  border-right: 1px solid #ddd;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n  padding: 10px;\r\n}\r\n\r\n.sidebar h2 {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.sidebar ul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.sidebar li {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.sidebar li:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.sidebar li:hover {\r\n  background-color: #e9ecef;\r\n}\r\n\r\n.sidebar li.active {\r\n  background-color: #007bff;\r\n  color: white;\r\n}\r\n\r\n.sidebar .avatar {\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.chat-box {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n  background-color: #ffffff;\r\n}\r\n\r\n.chat-box h2 {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  margin-bottom: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n  padding: 10px;\r\n}\r\n\r\n.admin-message {\r\n  text-align: right;\r\n  color: blue;\r\n  margin: 5px 0;\r\n}\r\n\r\n.customer-message {\r\n  text-align: left;\r\n  color: green;\r\n  margin: 5px 0;\r\n}\r\n\r\n.chat-input {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.chat-input input {\r\n  flex: 1;\r\n  padding: 10px;\r\n  border: 1px solid #ddd;\r\n  border-radius: 8px;\r\n}\r\n\r\n.chat-input button {\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n}\r\n\r\n.chat-input button:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.no-customer {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  font-size: 18px;\r\n  color: #6c757d;\r\n}\r\n</style>\r\n"],"version":3}