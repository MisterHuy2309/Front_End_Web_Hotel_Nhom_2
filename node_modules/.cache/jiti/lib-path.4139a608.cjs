"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _constants = require("./constants.js");
var _isArray = _interopRequireDefault(require("./is-array.js"));
var _isSymbol = _interopRequireDefault(require("./is-symbol.js"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

const path = {
  after(path, subPath) {
    if ((0, _isArray.default)(path)) {
      return path.slice(subPath.length);
    }

    if (subPath === '') {
      return path;
    }

    return path.slice(subPath.length + 1);
  },
  concat(path, key) {
    if ((0, _isArray.default)(path)) {
      path = [...path];

      if (key) {
        path.push(key);
      }

      return path;
    }

    if (key && key.toString !== undefined) {
      if (path !== '') {
        path += _constants.PATH_SEPARATOR;
      }

      if ((0, _isSymbol.default)(key)) {
        return path + key.toString();
      }

      return path + key;
    }

    return path;
  },
  initial(path) {
    if ((0, _isArray.default)(path)) {
      return path.slice(0, -1);
    }

    if (path === '') {
      return path;
    }

    const index = path.lastIndexOf(_constants.PATH_SEPARATOR);

    if (index === -1) {
      return '';
    }

    return path.slice(0, index);
  },
  last(path) {
    if ((0, _isArray.default)(path)) {
      return path.at(-1) ?? '';
    }

    if (path === '') {
      return path;
    }

    const index = path.lastIndexOf(_constants.PATH_SEPARATOR);

    if (index === -1) {
      return path;
    }

    return path.slice(index + 1);
  },
  walk(path, callback) {
    if ((0, _isArray.default)(path)) {
      for (const key of path) {
        callback(key);
      }
    } else if (path !== '') {
      let position = 0;
      let index = path.indexOf(_constants.PATH_SEPARATOR);

      if (index === -1) {
        callback(path);
      } else {
        while (position < path.length) {
          if (index === -1) {
            index = path.length;
          }

          callback(path.slice(position, index));

          position = index + 1;
          index = path.indexOf(_constants.PATH_SEPARATOR, position);
        }
      }
    }
  },
  get(object, path) {
    this.walk(path, (key) => {
      if (object) {
        object = object[key];
      }
    });

    return object;
  },
  isSubPath(path, subPath) {
    if ((0, _isArray.default)(path)) {
      if (path.length < subPath.length) {
        return false;
      }

      // eslint-disable-next-line unicorn/no-for-loop
      for (let i = 0; i < subPath.length; i++) {
        if (path[i] !== subPath[i]) {
          return false;
        }
      }

      return true;
    }

    if (path.length < subPath.length) {
      return false;
    }

    if (path === subPath) {
      return true;
    }

    if (path.startsWith(subPath)) {
      return path[subPath.length] === _constants.PATH_SEPARATOR;
    }

    return false;
  },
  isRootPath(path) {
    if ((0, _isArray.default)(path)) {
      return path.length === 0;
    }

    return path === '';
  }
};var _default = exports.default =

path; /* v9-24d1116f5ae2da14 */
