"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _isArray = _interopRequireDefault(require("../is-array.js"));
var _isBuiltin = require("../is-builtin.js");
var _isObject = _interopRequireDefault(require("../is-object.js"));
var _cloneObject = _interopRequireDefault(require("./clone/clone-object.js"));
var _cloneArray = _interopRequireDefault(require("./clone/clone-array.js"));
var _cloneDate = _interopRequireDefault(require("./clone/clone-date.js"));
var _cloneSet = _interopRequireDefault(require("./clone/clone-set.js"));
var _cloneMap = _interopRequireDefault(require("./clone/clone-map.js"));
var _cloneWeakset = _interopRequireDefault(require("./clone/clone-weakset.js"));
var _cloneWeakmap = _interopRequireDefault(require("./clone/clone-weakmap.js"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

class SmartClone {
  constructor(hasOnValidate) {
    this._stack = [];
    this._hasOnValidate = hasOnValidate;
  }

  static isHandledType(value) {
    return (0, _isObject.default)(value) ||
    (0, _isArray.default)(value) ||
    (0, _isBuiltin.isBuiltinWithMutableMethods)(value);
  }

  static isHandledMethod(target, name) {
    if ((0, _isObject.default)(target)) {
      return _cloneObject.default.isHandledMethod(name);
    }

    if ((0, _isArray.default)(target)) {
      return _cloneArray.default.isHandledMethod(name);
    }

    if (target instanceof Set) {
      return _cloneSet.default.isHandledMethod(name);
    }

    if (target instanceof Map) {
      return _cloneMap.default.isHandledMethod(name);
    }

    return (0, _isBuiltin.isBuiltinWithMutableMethods)(target);
  }

  get isCloning() {
    return this._stack.length > 0;
  }

  start(value, path, argumentsList) {
    let CloneClass = _cloneObject.default;

    if ((0, _isArray.default)(value)) {
      CloneClass = _cloneArray.default;
    } else if (value instanceof Date) {
      CloneClass = _cloneDate.default;
    } else if (value instanceof Set) {
      CloneClass = _cloneSet.default;
    } else if (value instanceof Map) {
      CloneClass = _cloneMap.default;
    } else if (value instanceof WeakSet) {
      CloneClass = _cloneWeakset.default;
    } else if (value instanceof WeakMap) {
      CloneClass = _cloneWeakmap.default;
    }

    this._stack.push(new CloneClass(value, path, argumentsList, this._hasOnValidate));
  }

  update(fullPath, property, value) {
    this._stack.at(-1).update(fullPath, property, value);
  }

  preferredThisArg(target, thisArgument, thisProxyTarget) {
    const { name } = target;
    const isHandledMethod = SmartClone.isHandledMethod(thisProxyTarget, name);

    return this._stack.at(-1).
    preferredThisArg(isHandledMethod, name, thisArgument, thisProxyTarget);
  }

  isChanged(isMutable, value, equals) {
    return this._stack.at(-1).isChanged(isMutable, value, equals);
  }

  isPartOfClone(changePath) {
    return this._stack.at(-1).isPathApplicable(changePath);
  }

  undo(object) {
    if (this._previousClone !== undefined) {
      this._previousClone.undo(object);
    }
  }

  stop() {
    this._previousClone = this._stack.pop();

    return this._previousClone.clone;
  }
}exports.default = SmartClone; /* v9-be8f25efa6b18e18 */
