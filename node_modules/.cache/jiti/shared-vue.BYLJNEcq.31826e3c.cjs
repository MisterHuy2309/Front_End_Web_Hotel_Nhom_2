"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.a = useHeadSafe;exports.b = useSeoMeta;exports.c = useServerHead;exports.d = useServerHeadSafe;exports.e = useServerSeoMeta;exports.h = void 0;exports.i = injectHead;exports.u = useHead;exports.v = vueInstall;var _plugins = require("unhead/plugins");
var _utils = require("unhead/utils");
var _vue = require("vue");
var _vueN9zWjxoK = require("./vue.N9zWjxoK.mjs");

const headSymbol = exports.h = "usehead";
function vueInstall(head) {
  const plugin = {
    install(app) {
      app.config.globalProperties.$unhead = head;
      app.config.globalProperties.$head = head;
      app.provide(headSymbol, head);
    }
  };
  return plugin.install;
}

function injectHead() {
  if ((0, _vue.hasInjectionContext)()) {
    const instance = (0, _vue.inject)(headSymbol);
    if (!instance) {
      throw new Error("useHead() was called without provide context, ensure you call it through the setup() function.");
    }
    return instance;
  }
  throw new Error("useHead() was called without provide context, ensure you call it through the setup() function.");
}
function useHead(input, options = {}) {
  const head = options.head || injectHead();
  return head.ssr ? head.push(input || {}, options) : clientUseHead(head, input, options);
}
function clientUseHead(head, input, options = {}) {
  const deactivated = (0, _vue.ref)(false);
  let entry;
  (0, _vue.watchEffect)(() => {
    const i = deactivated.value ? {} : (0, _utils.walkResolver)(input, _vueN9zWjxoK.V);
    if (entry) {
      entry.patch(i);
    } else {
      entry = head.push(i, options);
    }
  });
  const vm = (0, _vue.getCurrentInstance)();
  if (vm) {
    (0, _vue.onBeforeUnmount)(() => {
      entry.dispose();
    });
    (0, _vue.onDeactivated)(() => {
      deactivated.value = true;
    });
    (0, _vue.onActivated)(() => {
      deactivated.value = false;
    });
  }
  return entry;
}
function useHeadSafe(input = {}, options = {}) {
  const head = options.head || injectHead();
  head.use(_plugins.SafeInputPlugin);
  options._safe = true;
  return useHead(input, options);
}
function useSeoMeta(input = {}, options = {}) {
  const head = options.head || injectHead();
  head.use(_plugins.FlatMetaPlugin);
  const { title, titleTemplate, ...meta } = input;
  return useHead({
    title,
    titleTemplate,
    _flatMeta: meta
  }, options);
}
function useServerHead(input, options = {}) {
  return useHead(input, { ...options, mode: "server" });
}
function useServerHeadSafe(input, options = {}) {
  return useHeadSafe(input, { ...options, mode: "server" });
}
function useServerSeoMeta(input, options = {}) {
  return useSeoMeta(input, { ...options, mode: "server" });
} /* v9-2b52aeaf0f546286 */
