"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.isSymlinkSync = exports.isSymlink = exports.isFileSync = exports.isFile = exports.isDirectorySync = exports.isDirectory = void 0;var _nodeFs = _interopRequireDefault(require("node:fs"));
var _promises = _interopRequireDefault(require("node:fs/promises"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}

async function isType(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== 'string') {
    throw new TypeError(`Expected a string, got ${typeof filePath}`);
  }

  try {
    const stats = await _promises.default[fsStatType](filePath);
    return stats[statsMethodName]();
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false;
    }

    throw error;
  }
}

function isTypeSync(fsStatType, statsMethodName, filePath) {
  if (typeof filePath !== 'string') {
    throw new TypeError(`Expected a string, got ${typeof filePath}`);
  }

  try {
    return _nodeFs.default[fsStatType](filePath)[statsMethodName]();
  } catch (error) {
    if (error.code === 'ENOENT') {
      return false;
    }

    throw error;
  }
}

const isFile = exports.isFile = isType.bind(undefined, 'stat', 'isFile');
const isDirectory = exports.isDirectory = isType.bind(undefined, 'stat', 'isDirectory');
const isSymlink = exports.isSymlink = isType.bind(undefined, 'lstat', 'isSymbolicLink');
const isFileSync = exports.isFileSync = isTypeSync.bind(undefined, 'statSync', 'isFile');
const isDirectorySync = exports.isDirectorySync = isTypeSync.bind(undefined, 'statSync', 'isDirectory');
const isSymlinkSync = exports.isSymlinkSync = isTypeSync.bind(undefined, 'lstatSync', 'isSymbolicLink'); /* v9-a8dd752e77f546ad */
