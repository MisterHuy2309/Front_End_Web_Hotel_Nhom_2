export declare const VaAccordion: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<boolean[]>;
            default: () => boolean[];
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        inset: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: BooleanConstructor;
            default: boolean;
        };
        popout: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        collapses: import("vue").Ref<import("vuestic-ui/dist/types/components/va-accordion/hooks/useAccordion.js").AccordionItem[]>;
        value: import("vuestic-ui/dist/types/composables/index.js").StatefulValue<boolean[]>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<boolean[]>;
            default: () => boolean[];
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        inset: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: BooleanConstructor;
            default: boolean;
        };
        popout: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: boolean[];
        multiple: boolean;
        inset: boolean;
        stateful: boolean;
        popout: boolean;
        preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: import("vue").PropType<boolean[]>;
            default: () => boolean[];
        };
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        inset: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: BooleanConstructor;
            default: boolean;
        };
        popout: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        collapses: import("vue").Ref<import("vuestic-ui/dist/types/components/va-accordion/hooks/useAccordion.js").AccordionItem[]>;
        value: import("vuestic-ui/dist/types/composables/index.js").StatefulValue<boolean[]>;
    }, {}, {}, {}, {
        modelValue: boolean[];
        multiple: boolean;
        inset: boolean;
        stateful: boolean;
        popout: boolean;
        preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: import("vue").PropType<boolean[]>;
        default: () => boolean[];
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    inset: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: BooleanConstructor;
        default: boolean;
    };
    popout: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    collapses: import("vue").Ref<import("vuestic-ui/dist/types/components/va-accordion/hooks/useAccordion.js").AccordionItem[]>;
    value: import("vuestic-ui/dist/types/composables/index.js").StatefulValue<boolean[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, {
    modelValue: boolean[];
    multiple: boolean;
    inset: boolean;
    stateful: boolean;
    popout: boolean;
    preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
