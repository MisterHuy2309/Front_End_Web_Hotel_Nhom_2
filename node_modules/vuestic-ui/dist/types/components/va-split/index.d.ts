export declare const VaSplit: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
            validator: (v: number) => boolean;
        };
        maximization: {
            type: BooleanConstructor;
            default: boolean;
        };
        maximizeStart: {
            type: BooleanConstructor;
            default: boolean;
        };
        limits: {
            type: import("vue").PropType<[import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit, import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit]>;
            default: () => number[];
        };
        snapping: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/components/va-split/types.js").SnappingMark[]>;
            default: undefined;
        };
        snappingRange: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        ariaLabel: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").TranslationProp>;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:modelValue": (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
            validator: (v: number) => boolean;
        };
        maximization: {
            type: BooleanConstructor;
            default: boolean;
        };
        maximizeStart: {
            type: BooleanConstructor;
            default: boolean;
        };
        limits: {
            type: import("vue").PropType<[import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit, import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit]>;
            default: () => number[];
        };
        snapping: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/components/va-split/types.js").SnappingMark[]>;
            default: undefined;
        };
        snappingRange: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        ariaLabel: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").TranslationProp>;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {
        modelValue: number;
        stateful: boolean;
        preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
        vertical: boolean;
        disabled: boolean;
        ariaLabel: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        maximization: boolean;
        maximizeStart: boolean;
        limits: [import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit, import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit];
        snapping: import("vuestic-ui/dist/types/components/va-split/types.js").SnappingMark[];
        snappingRange: string | number;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        modelValue: {
            type: NumberConstructor;
            default: number;
            validator: (v: number) => boolean;
        };
        maximization: {
            type: BooleanConstructor;
            default: boolean;
        };
        maximizeStart: {
            type: BooleanConstructor;
            default: boolean;
        };
        limits: {
            type: import("vue").PropType<[import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit, import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit]>;
            default: () => number[];
        };
        snapping: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/components/va-split/types.js").SnappingMark[]>;
            default: undefined;
        };
        snappingRange: {
            type: import("vue").PropType<string | number>;
            default: number;
        };
        ariaLabel: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").TranslationProp>;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        vertical: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
    }>> & {
        "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    }, {}, {}, {}, {}, {
        modelValue: number;
        stateful: boolean;
        preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
        vertical: boolean;
        disabled: boolean;
        ariaLabel: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        maximization: boolean;
        maximizeStart: boolean;
        limits: [import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit, import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit];
        snapping: import("vuestic-ui/dist/types/components/va-split/types.js").SnappingMark[];
        snappingRange: string | number;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: NumberConstructor;
        default: number;
        validator: (v: number) => boolean;
    };
    maximization: {
        type: BooleanConstructor;
        default: boolean;
    };
    maximizeStart: {
        type: BooleanConstructor;
        default: boolean;
    };
    limits: {
        type: import("vue").PropType<[import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit, import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit]>;
        default: () => number[];
    };
    snapping: {
        type: import("vue").PropType<import("vuestic-ui/dist/types/components/va-split/types.js").SnappingMark[]>;
        default: undefined;
    };
    snappingRange: {
        type: import("vue").PropType<string | number>;
        default: number;
    };
    ariaLabel: {
        type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").TranslationProp>;
        default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    preset: {
        type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
        default: undefined;
    };
}>> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, {
    modelValue: number;
    stateful: boolean;
    preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
    vertical: boolean;
    disabled: boolean;
    ariaLabel: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
    maximization: boolean;
    maximizeStart: boolean;
    limits: [import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit, import("vuestic-ui/dist/types/components/va-split/types.js").SplitLimit];
    snapping: import("vuestic-ui/dist/types/components/va-split/types.js").SnappingMark[];
    snappingRange: string | number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        start?(_: {
            containerSize: any;
        }): any;
        grabber?(_: {}): any;
        end?(_: {
            containerSize: any;
        }): any;
    };
});
