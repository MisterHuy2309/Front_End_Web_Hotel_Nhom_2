export declare const VaInput: {
    new (...args: any[]): import("vue").CreateComponentPublicInstance<Readonly<import("vue").ExtractPropTypes<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        modelValue: {
            type: import("vue").PropType<string | number | null>;
            default: string;
        };
        type: {
            type: import("vuestic-ui/dist/types/utils/types/prop-type.js").AnyStringPropType<"text" | "password">;
            default: string;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        autocomplete: {
            type: StringConstructor;
        };
        ariaResetLabel: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").TranslationProp>;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        };
        strictBindInputValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        rules: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").ValidationRule<string>[]>;
            default: () => any;
            required: false;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        maxLength: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<NonNullable<import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined>>;
            required: true;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
    }>>, {
        isValid: import("vue").ComputedRef<boolean>;
        isDirty: import("vue").Ref<boolean>;
        isTouched: import("vue").Ref<boolean>;
        isLoading: import("vue").WritableComputedRef<boolean>;
        computedError: import("vue").ComputedRef<boolean>;
        computedErrorMessages: import("vue").ComputedRef<string[]>;
        reset: () => void;
        focus: () => void;
        blur: () => void;
        value: import("vuestic-ui/dist/types/composables/index.js").StatefulValue<string | number | null>;
        withoutValidation: (cb: () => any) => void;
        resetValidation: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        [x: string]: (...args: any[]) => void;
    }, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        modelValue: {
            type: import("vue").PropType<string | number | null>;
            default: string;
        };
        type: {
            type: import("vuestic-ui/dist/types/utils/types/prop-type.js").AnyStringPropType<"text" | "password">;
            default: string;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        autocomplete: {
            type: StringConstructor;
        };
        ariaResetLabel: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").TranslationProp>;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        };
        strictBindInputValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        rules: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").ValidationRule<string>[]>;
            default: () => any;
            required: false;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        maxLength: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<NonNullable<import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined>>;
            required: true;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
    }>>, {
        label: string;
        error: boolean;
        onClick: (...args: any[]) => any;
        type: import("vuestic-ui/dist/types/utils/types/prop-type.js").StringWithAutocomplete<"text" | "password">;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: string | number | null;
        stateful: boolean;
        preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
        color: string;
        name: string;
        loading: NonNullable<boolean | undefined>;
        success: boolean;
        disabled: boolean;
        readonly: boolean;
        rules: import("vuestic-ui/dist/types/composables/index.js").ValidationRule<string>[];
        dirty: boolean;
        errorMessages: string | string[];
        errorCount: string | number;
        messages: string | string[];
        immediateValidation: boolean;
        requiredMark: NonNullable<boolean | undefined>;
        "onClick-prepend": (...args: any[]) => any;
        "onClick-append": (...args: any[]) => any;
        "onClick-prepend-inner": (...args: any[]) => any;
        "onClick-append-inner": (...args: any[]) => any;
        "onClick-field": (...args: any[]) => any;
        counter: boolean;
        maxLength: NonNullable<string | number | undefined>;
        placeholder: string;
        background: string;
        innerLabel: NonNullable<boolean | undefined>;
        inputAriaLabel: NonNullable<import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined>;
        inputAriaLabelledby: string;
        inputAriaDescribedby: string;
        tabindex: string | number;
        inputClass: string;
        inputmode: string;
        ariaResetLabel: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        strictBindInputValue: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
        autofocus: boolean;
    }, true, {}, {}, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("vue").ExtractPropTypes<{
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        tabindex: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        modelValue: {
            type: import("vue").PropType<string | number | null>;
            default: string;
        };
        type: {
            type: import("vuestic-ui/dist/types/utils/types/prop-type.js").AnyStringPropType<"text" | "password">;
            default: string;
        };
        inputClass: {
            type: StringConstructor;
            default: string;
        };
        pattern: {
            type: StringConstructor;
        };
        inputmode: {
            type: StringConstructor;
            default: string;
        };
        counter: {
            type: BooleanConstructor;
            default: boolean;
        };
        autocomplete: {
            type: StringConstructor;
        };
        ariaResetLabel: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").TranslationProp>;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        };
        strictBindInputValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        stateful: {
            type: import("vue").PropType<boolean>;
            default: boolean;
        };
        preset: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
            default: undefined;
        };
        clearable: {
            type: BooleanConstructor;
            default: boolean;
        };
        clearableIcon: {
            type: StringConstructor;
            default: string;
        };
        clearValue: {
            type: StringConstructor;
            default: string;
        };
        rules: {
            type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").ValidationRule<string>[]>;
            default: () => any;
            required: false;
        };
        error: {
            type: BooleanConstructor;
            default: undefined;
        };
        name: {
            type: StringConstructor;
            default: undefined;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        dirty: {
            type: BooleanConstructor;
            default: boolean;
        };
        errorMessages: {
            type: import("vue").PropType<string | string[]>;
            default: undefined;
        };
        errorCount: {
            type: (StringConstructor | NumberConstructor)[];
            default: number;
        };
        messages: {
            type: import("vue").PropType<string | string[]>;
            default: () => never[];
        };
        immediateValidation: {
            type: BooleanConstructor;
            default: boolean;
        };
        autofocus: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        label: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        onClick: {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onUpdate:modelValue": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        color: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        loading: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        requiredMark: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        "onClick-prepend": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-prepend-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-append-inner": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        "onClick-field": {
            type: import("vue").PropType<(...args: any[]) => any>;
            required: true;
            default: ((...args: any[]) => any) | undefined;
        };
        maxLength: {
            type: import("vue").PropType<NonNullable<string | number | undefined>>;
            required: true;
            default: string | number | undefined;
        };
        background: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        innerLabel: {
            type: import("vue").PropType<NonNullable<boolean | undefined>>;
            required: true;
            default: boolean | undefined;
        };
        inputAriaLabel: {
            type: import("vue").PropType<NonNullable<import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined>>;
            required: true;
            default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined;
        };
        inputAriaLabelledby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
        inputAriaDescribedby: {
            type: import("vue").PropType<string>;
            required: true;
            default: string | undefined;
        };
    }>>, {
        isValid: import("vue").ComputedRef<boolean>;
        isDirty: import("vue").Ref<boolean>;
        isTouched: import("vue").Ref<boolean>;
        isLoading: import("vue").WritableComputedRef<boolean>;
        computedError: import("vue").ComputedRef<boolean>;
        computedErrorMessages: import("vue").ComputedRef<string[]>;
        reset: () => void;
        focus: () => void;
        blur: () => void;
        value: import("vuestic-ui/dist/types/composables/index.js").StatefulValue<string | number | null>;
        withoutValidation: (cb: () => any) => void;
        resetValidation: () => void;
    }, {}, {}, {}, {
        label: string;
        error: boolean;
        onClick: (...args: any[]) => any;
        type: import("vuestic-ui/dist/types/utils/types/prop-type.js").StringWithAutocomplete<"text" | "password">;
        "onUpdate:modelValue": (...args: any[]) => any;
        modelValue: string | number | null;
        stateful: boolean;
        preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
        color: string;
        name: string;
        loading: NonNullable<boolean | undefined>;
        success: boolean;
        disabled: boolean;
        readonly: boolean;
        rules: import("vuestic-ui/dist/types/composables/index.js").ValidationRule<string>[];
        dirty: boolean;
        errorMessages: string | string[];
        errorCount: string | number;
        messages: string | string[];
        immediateValidation: boolean;
        requiredMark: NonNullable<boolean | undefined>;
        "onClick-prepend": (...args: any[]) => any;
        "onClick-append": (...args: any[]) => any;
        "onClick-prepend-inner": (...args: any[]) => any;
        "onClick-append-inner": (...args: any[]) => any;
        "onClick-field": (...args: any[]) => any;
        counter: boolean;
        maxLength: NonNullable<string | number | undefined>;
        placeholder: string;
        background: string;
        innerLabel: NonNullable<boolean | undefined>;
        inputAriaLabel: NonNullable<import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined>;
        inputAriaLabelledby: string;
        inputAriaDescribedby: string;
        tabindex: string | number;
        inputClass: string;
        inputmode: string;
        ariaResetLabel: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
        strictBindInputValue: boolean;
        clearable: boolean;
        clearableIcon: string;
        clearValue: string;
        autofocus: boolean;
    }>;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    tabindex: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    modelValue: {
        type: import("vue").PropType<string | number | null>;
        default: string;
    };
    type: {
        type: import("vuestic-ui/dist/types/utils/types/prop-type.js").AnyStringPropType<"text" | "password">;
        default: string;
    };
    inputClass: {
        type: StringConstructor;
        default: string;
    };
    pattern: {
        type: StringConstructor;
    };
    inputmode: {
        type: StringConstructor;
        default: string;
    };
    counter: {
        type: BooleanConstructor;
        default: boolean;
    };
    autocomplete: {
        type: StringConstructor;
    };
    ariaResetLabel: {
        type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").TranslationProp>;
        default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
    };
    strictBindInputValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    stateful: {
        type: import("vue").PropType<boolean>;
        default: boolean;
    };
    preset: {
        type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").PresetPropValue>;
        default: undefined;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearableIcon: {
        type: StringConstructor;
        default: string;
    };
    clearValue: {
        type: StringConstructor;
        default: string;
    };
    rules: {
        type: import("vue").PropType<import("vuestic-ui/dist/types/composables/index.js").ValidationRule<string>[]>;
        default: () => any;
        required: false;
    };
    error: {
        type: BooleanConstructor;
        default: undefined;
    };
    name: {
        type: StringConstructor;
        default: undefined;
    };
    success: {
        type: BooleanConstructor;
        default: boolean;
    };
    dirty: {
        type: BooleanConstructor;
        default: boolean;
    };
    errorMessages: {
        type: import("vue").PropType<string | string[]>;
        default: undefined;
    };
    errorCount: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    messages: {
        type: import("vue").PropType<string | string[]>;
        default: () => never[];
    };
    immediateValidation: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    label: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    onClick: {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onUpdate:modelValue": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    color: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    loading: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    requiredMark: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    "onClick-prepend": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-prepend-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-append-inner": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    "onClick-field": {
        type: import("vue").PropType<(...args: any[]) => any>;
        required: true;
        default: ((...args: any[]) => any) | undefined;
    };
    maxLength: {
        type: import("vue").PropType<NonNullable<string | number | undefined>>;
        required: true;
        default: string | number | undefined;
    };
    background: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    innerLabel: {
        type: import("vue").PropType<NonNullable<boolean | undefined>>;
        required: true;
        default: boolean | undefined;
    };
    inputAriaLabel: {
        type: import("vue").PropType<NonNullable<import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined>>;
        required: true;
        default: import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined;
    };
    inputAriaLabelledby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
    inputAriaDescribedby: {
        type: import("vue").PropType<string>;
        required: true;
        default: string | undefined;
    };
}>>, {
    isValid: import("vue").ComputedRef<boolean>;
    isDirty: import("vue").Ref<boolean>;
    isTouched: import("vue").Ref<boolean>;
    isLoading: import("vue").WritableComputedRef<boolean>;
    computedError: import("vue").ComputedRef<boolean>;
    computedErrorMessages: import("vue").ComputedRef<string[]>;
    reset: () => void;
    focus: () => void;
    blur: () => void;
    value: import("vuestic-ui/dist/types/composables/index.js").StatefulValue<string | number | null>;
    withoutValidation: (cb: () => any) => void;
    resetValidation: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    [x: string]: (...args: any[]) => void;
}, string, {
    label: string;
    error: boolean;
    onClick: (...args: any[]) => any;
    type: import("vuestic-ui/dist/types/utils/types/prop-type.js").StringWithAutocomplete<"text" | "password">;
    "onUpdate:modelValue": (...args: any[]) => any;
    modelValue: string | number | null;
    stateful: boolean;
    preset: import("vuestic-ui/dist/types/composables/index.js").PresetPropValue;
    color: string;
    name: string;
    loading: NonNullable<boolean | undefined>;
    success: boolean;
    disabled: boolean;
    readonly: boolean;
    rules: import("vuestic-ui/dist/types/composables/index.js").ValidationRule<string>[];
    dirty: boolean;
    errorMessages: string | string[];
    errorCount: string | number;
    messages: string | string[];
    immediateValidation: boolean;
    requiredMark: NonNullable<boolean | undefined>;
    "onClick-prepend": (...args: any[]) => any;
    "onClick-append": (...args: any[]) => any;
    "onClick-prepend-inner": (...args: any[]) => any;
    "onClick-append-inner": (...args: any[]) => any;
    "onClick-field": (...args: any[]) => any;
    counter: boolean;
    maxLength: NonNullable<string | number | undefined>;
    placeholder: string;
    background: string;
    innerLabel: NonNullable<boolean | undefined>;
    inputAriaLabel: NonNullable<import("vuestic-ui/dist/types/composables/index.js").TranslationProp | undefined>;
    inputAriaLabelledby: string;
    inputAriaDescribedby: string;
    tabindex: string | number;
    inputClass: string;
    inputmode: string;
    ariaResetLabel: import("vuestic-ui/dist/types/composables/index.js").TranslationProp;
    strictBindInputValue: boolean;
    clearable: boolean;
    clearableIcon: string;
    clearValue: string;
    autofocus: boolean;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Partial<Record<string, (_: any) => any>> & {
        icon?(_: any): any;
    };
});
