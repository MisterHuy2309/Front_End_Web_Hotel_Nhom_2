import type { ComponentInternalInstance, Ref, ShallowRef } from 'vue';
import type { TableV2Props } from 'element-plus/es/components/table-v2/src/table.mjs';
import type { RowExpandParams, RowHeightChangedParams, RowHoverParams } from 'element-plus/es/components/table-v2/src/row.mjs';
import type { FixedDirection, KeyType } from 'element-plus/es/components/table-v2/src/types.mjs';
import type { onRowRenderedParams } from 'element-plus/es/components/table-v2/src/grid.mjs';
import type { TableGridInstance } from 'element-plus/es/components/table-v2/src/table-grid.mjs';
import type { UseNamespaceReturn } from 'element-plus/es/hooks/index.mjs';
type Heights = Record<KeyType, number>;
type GridInstanceRef = Ref<TableGridInstance | undefined>;
type UseRowProps = {
    mainTableRef: GridInstanceRef;
    leftTableRef: GridInstanceRef;
    rightTableRef: GridInstanceRef;
    tableInstance: ComponentInternalInstance;
    ns: UseNamespaceReturn;
    isScrolling: ShallowRef<boolean>;
};
export declare const useRow: (props: TableV2Props, { mainTableRef, leftTableRef, rightTableRef, tableInstance, ns, isScrolling, }: UseRowProps) => {
    expandedRowKeys: Ref<KeyType[]>;
    lastRenderedRowIndex: Ref<number>;
    isDynamic: import("vue").ComputedRef<boolean>;
    isResetting: ShallowRef<boolean>;
    rowHeights: Ref<Heights>;
    resetAfterIndex: (index: number, forceUpdate?: boolean) => void;
    onRowExpanded: ({ expanded, rowData, rowIndex, rowKey, }: RowExpandParams) => void;
    onRowHovered: ({ hovered, rowKey }: RowHoverParams) => void;
    onRowsRendered: (params: onRowRenderedParams) => void;
    onRowHeightChange: ({ rowKey, height, rowIndex }: RowHeightChangedParams, fixedDir: FixedDirection) => void;
};
export type UseRowReturn = ReturnType<typeof useRow>;
export {};
