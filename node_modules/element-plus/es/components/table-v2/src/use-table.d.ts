import type { TableV2Props } from 'element-plus/es/components/table-v2/src/table.mjs';
import type { TableGridInstance } from 'element-plus/es/components/table-v2/src/table-grid.mjs';
declare function useTable(props: TableV2Props): {
    columns: import("vue").ComputedRef<{
        key: import("element-plus/es/components/table-v2/src/types.mjs").KeyType;
        align?: import("element-plus/es/components/table-v2/src/types.mjs").Alignment;
        class?: string | import("element-plus/es/components/table-v2/src/types.mjs").ClassNameGetter<any> | undefined;
        dataKey?: import("element-plus/es/components/table-v2/src/types.mjs").KeyType;
        fixed?: true | import("element-plus/es/components/table-v2/src/types.mjs").FixedDirection;
        flexGrow?: import("vue").CSSProperties["flexGrow"];
        flexShrink?: import("vue").CSSProperties["flexShrink"];
        title?: string;
        hidden?: boolean;
        headerClass?: string | import("element-plus/es/components/table-v2/src/types.mjs").HeaderClassGetter<any> | undefined;
        maxWidth?: number;
        minWidth?: number;
        style?: import("vue").CSSProperties;
        sortable?: boolean;
        width: number;
        cellRenderer?: import("element-plus/es/components/table-v2/src/types.mjs").CellRenderer<any> | undefined;
        headerCellRenderer?: import("element-plus/es/components/table-v2/src/types.mjs").HeaderCellRenderer<any> | undefined;
    }[]>;
    containerRef: import("vue").Ref<any>;
    mainTableRef: import("vue").Ref<TableGridInstance | undefined>;
    leftTableRef: import("vue").Ref<TableGridInstance | undefined>;
    rightTableRef: import("vue").Ref<TableGridInstance | undefined>;
    isDynamic: import("vue").ComputedRef<boolean>;
    isResetting: import("vue").ShallowRef<boolean>;
    isScrolling: import("vue").ShallowRef<boolean>;
    hasFixedColumns: import("vue").ComputedRef<number>;
    columnsStyles: import("vue").ComputedRef<Record<import("element-plus/es/components/table-v2/src/types.mjs").KeyType | undefined, import("vue").CSSProperties>>;
    columnsTotalWidth: import("vue").ComputedRef<number>;
    data: import("vue").ComputedRef<any[]>;
    expandedRowKeys: import("vue").Ref<import("element-plus/es/components/table-v2/src/types.mjs").KeyType[]>;
    depthMap: import("vue").Ref<Record<import("element-plus/es/components/table-v2/src/types.mjs").KeyType, number>>;
    fixedColumnsOnLeft: import("vue").ComputedRef<{
        key: import("element-plus/es/components/table-v2/src/types.mjs").KeyType;
        align?: import("element-plus/es/components/table-v2/src/types.mjs").Alignment;
        class?: string | import("element-plus/es/components/table-v2/src/types.mjs").ClassNameGetter<any> | undefined;
        dataKey?: import("element-plus/es/components/table-v2/src/types.mjs").KeyType;
        fixed?: true | import("element-plus/es/components/table-v2/src/types.mjs").FixedDirection;
        flexGrow?: import("vue").CSSProperties["flexGrow"];
        flexShrink?: import("vue").CSSProperties["flexShrink"];
        title?: string;
        hidden?: boolean;
        headerClass?: string | import("element-plus/es/components/table-v2/src/types.mjs").HeaderClassGetter<any> | undefined;
        maxWidth?: number;
        minWidth?: number;
        style?: import("vue").CSSProperties;
        sortable?: boolean;
        width: number;
        cellRenderer?: import("element-plus/es/components/table-v2/src/types.mjs").CellRenderer<any> | undefined;
        headerCellRenderer?: import("element-plus/es/components/table-v2/src/types.mjs").HeaderCellRenderer<any> | undefined;
    }[]>;
    fixedColumnsOnRight: import("vue").ComputedRef<{
        key: import("element-plus/es/components/table-v2/src/types.mjs").KeyType;
        align?: import("element-plus/es/components/table-v2/src/types.mjs").Alignment;
        class?: string | import("element-plus/es/components/table-v2/src/types.mjs").ClassNameGetter<any> | undefined;
        dataKey?: import("element-plus/es/components/table-v2/src/types.mjs").KeyType;
        fixed?: true | import("element-plus/es/components/table-v2/src/types.mjs").FixedDirection;
        flexGrow?: import("vue").CSSProperties["flexGrow"];
        flexShrink?: import("vue").CSSProperties["flexShrink"];
        title?: string;
        hidden?: boolean;
        headerClass?: string | import("element-plus/es/components/table-v2/src/types.mjs").HeaderClassGetter<any> | undefined;
        maxWidth?: number;
        minWidth?: number;
        style?: import("vue").CSSProperties;
        sortable?: boolean;
        width: number;
        cellRenderer?: import("element-plus/es/components/table-v2/src/types.mjs").CellRenderer<any> | undefined;
        headerCellRenderer?: import("element-plus/es/components/table-v2/src/types.mjs").HeaderCellRenderer<any> | undefined;
    }[]>;
    mainColumns: import("vue").ComputedRef<import("element-plus/es/components/table-v2/src/types.mjs").AnyColumns>;
    bodyWidth: import("vue").ComputedRef<number>;
    emptyStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    rootStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    headerWidth: import("vue").ComputedRef<number>;
    footerHeight: import("vue").ComputedRef<import("vue").CSSProperties>;
    mainTableHeight: import("vue").ComputedRef<number>;
    fixedTableHeight: import("vue").ComputedRef<number>;
    leftTableWidth: import("vue").ComputedRef<number>;
    rightTableWidth: import("vue").ComputedRef<number>;
    showEmpty: import("vue").ComputedRef<boolean>;
    getRowHeight: (rowIndex: number) => number;
    onColumnSorted: (e: MouseEvent) => void;
    onRowHovered: ({ hovered, rowKey }: import("element-plus").RowHoverParams) => void;
    onRowExpanded: ({ expanded, rowData, rowIndex, rowKey, }: import("element-plus").RowExpandParams) => void;
    onRowsRendered: (params: import("element-plus/es/components/table-v2/src/grid.mjs").onRowRenderedParams) => void;
    onRowHeightChange: ({ rowKey, height, rowIndex }: import("element-plus").RowHeightChangedParams, fixedDir: import("element-plus/es/components/table-v2/src/types.mjs").FixedDirection) => void;
    scrollTo: (params: import("element-plus/es/components/table-v2/src/composables/index.mjs").ScrollPos) => void;
    scrollToLeft: (scrollLeft: number) => void;
    scrollToTop: (scrollTop: number) => void;
    scrollToRow: (row: number, strategy?: import("element-plus/es/components/virtual-list/src/types.mjs").Alignment) => void;
    onScroll: (params: import("element-plus/es/components/table-v2/src/composables/index.mjs").ScrollPos) => void;
    onVerticalScroll: ({ scrollTop }: import("element-plus/es/components/table-v2/src/composables/index.mjs").ScrollPos) => void;
};
export { useTable };
export type UseTableReturn = ReturnType<typeof useTable>;
